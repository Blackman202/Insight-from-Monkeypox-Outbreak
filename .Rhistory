summary(gain_model)
gain1 <- as.data.frame(unclass(gain), stringsAsFactors = TRUE)
head(gain1, 3)
coplot(Weight ~ Age | Sex, data=gain)
lm(ozone ~ rad + temp + wind)
lm(ozone ~ rad + temp + wind, data=ozone_pollution)
lm(ozone ~ rad + wind, data=ozone_pollution)
library(shiny)
library(shinydashboard)
runApp('dashboard')
library(dplyr)
library(ggplot2)
library(forcats)
library(ggpubr)
?USArrests
# Importing the data
research_data <- read.csv("research_areas.csv")
# Selecting and renaming variables
research_data <- research_data[c("Topic", "Agency.and.Office.Name", "Status",
"Country.ies..in.which.research.is.will.be.conducted")]
names(research_data) <- c("Topic", "Agencies", "Status", "Research_region")
research_data %>%
str()
# libraries
library(dplyr)
library(ggplot2)
library(forcats)
library(ggpubr)
# Research activities data
# Importing the data
research_data <- read.csv("research_areas.csv")
# Selecting and renaming variables
research_data <- research_data[c("Topic", "Agency.and.Office.Name", "Status",
"Country.ies..in.which.research.is.will.be.conducted")]
names(research_data) <- c("Topic", "Agencies", "Status", "Research_region")
# Cleaning the data
research_data$Research_region <- substring(research_data$Research_region, 0, 13)
research_data$Status  <- gsub(" phases", '', research_data$Status)
research_data$Status  <- gsub(";", '', research_data$Status)
research_data %>%
str()
# Mpox morbidity and mortality data
daily_cases <- read.csv("daily_mpox_cases.csv")
daily_cases <- daily_cases[c("location", "date", "total_cases", "total_deaths")]
daily_cases$date <- as.POSIXct(daily_cases$date)
runApp('dashboard')
library(DT)
runApp('dashboard')
daily_cases
unique(daily_cases$location)
length(unique(daily_cases$location))
runApp('dashboard')
library(plotly)
topic <- research_data %>%
count(Topic) %>%
plotly() %>%
add_bars(x=~Topic, y=n)
topic <- research_data %>%
count(Topic)
topic
topic %>%
plotly() %>%
add_bars(x=Topic, y=n)
topic %>%
plotly() %>%
add_bars(x=~Topic, y=n)
topic
topic %>%
plotly() %>%
add_bars(x=~Topic, y=~n)
topic %>%
plotly() %>%
add_bars(x=~Topic, y=n) %>%
layout(title="Frequencies of Research Topic",
xaxis=list(title="Topic"),
yaxis=list(title="Frequency"))
topic <- research_data %>%
count(Topic) %>%
ggplot(aes(x = reorder(Topic, n), y = n))+
geom_bar(stat = 'identity', width=0.5)
ggplotly(test)
ggplotly(topic)
topic <- research_data %>%
count(Topic) %>%
ggplot(aes(x = Topic, y = n))+
geom_bar(stat = 'identity', width=0.5)
ggplotly(topic)
topic <- research_data %>%
count(Topic) %>%
ggplot(aes(x = Topic, y = n))+
geom_bar(stat = 'identity', width=0.5)+
xlab("Topic")+
ylab("Frequency")+
coord_flip()+
theme_bw()
ggplotly(topic)
topic <- research_data %>%
count(Topic) %>%
rename(count=n) %>%
ggplot(aes(x = Topic, y = n))+
geom_bar(stat = 'identity', width=0.5)+
xlab("Topic")+
ylab("Frequency")+
coord_flip()+
theme_bw()
ggplotly(topic)
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x = Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab("Topic")+
ylab("Frequency")+
coord_flip()+
theme_bw()
ggplotly(topic)
daily_cases
location_cases <- daily_cases %>%
group_by(location) %>%
summarise(across(total_cases:total_deaths, sum))
ggplot(aes(x=total_cases))+
geom_boxplot()
ggplot(location_cases, aes(x=total_cases))+
geom_boxplot()
boxplot <- ggplot(location_cases, aes(x=total_cases))+
geom_boxplot()
ggplotly(boxplot)
boxplot <- ggplot(location_cases, aes(x=total_cases))+
geom_boxplot()
ggplotly(boxplot)
boxplot <- ggplot(location_cases, aes(x=total_cases))+
geom_histogram()
ggplotly(boxplot)
# data structure
research_data %>%
str()
# choices for select input
str(research_data)
# choices for select input
names(str(research_data))
# choices for select input
names(research_data)
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x=Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab(Topic)+
ylab("Frequency")+
coord_flip()+
theme_bw()
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
ggplot(aes(x = Agencies, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x=Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab(Topic)+
ylab("Frequency")+
coord_flip()+
theme_bw()
# Selecting and renaming variables
research_data <- research_data[c("Topic", "Agency.and.Office.Name", "Status",
"Country.ies..in.which.research.is.will.be.conducted")]
names(research_data) <- c("Topic", "Agencies", "Status", "Research_region")
# Cleaning the data
research_data$Research_region <- substring(research_data$Research_region, 0, 13)
research_data$Status  <- gsub(" phases", '', research_data$Status)
research_data$Status  <- gsub(";", '', research_data$Status)
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x=Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab(Topic)+
ylab("Frequency")+
coord_flip()+
theme_bw()
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x=Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab("Topic")+
ylab("Frequency")+
coord_flip()+
theme_bw()
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
ggplot(aes(x = Agencies, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
region <- research_data %>%
count(Research_region) %>%
rename(counts=n) %>%
ggplot(aes(x=Research_region, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Region")+
ylab("Frequency")+
coord_flip()+
theme_bw()
status <- research_data %>%
count(Status) %>%
rename(counts=n) %>%
ggplot(aes(x = Status, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Status")+
ylab("Frequency")+
coord_flip()+
theme_bw()
p1 <- ggplotly(topic)
p2 <- ggplotly(region)
p3 <- ggplot(status)
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x=Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab("Topic")+
ylab("Frequency")+
coord_flip()+
theme_bw()
topic
agencies
research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
ggplot(aes(x = Agencies, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
ggplot(aes(x = Agencies, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
ggplot(aes(x = Agencies, y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
agencies
agencies <- research_data %>%
count(Agencies) %>%
ggplot(aes(x = reorder(Agencies, n), y = n))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
agencies
agencies
ggarrange(topic, region, status, ncol=2, nrow=2, labels=c("A", "B", "C"), ggarrange(agencies, labels="D"))
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
ggplot(aes(x=Topic, y = counts))+
geom_bar(stat = 'identity', width=0.5)+
xlab("Topic")+
ylab("Frequency")+
coord_flip()+
theme_bw()
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n) %>%
ggplot(aes(x = Agencies, y = counts))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Agencies")+
ylab("Frequency")+
coord_flip()+
theme_bw()
region <- research_data %>%
count(Research_region) %>%
rename(counts=n) %>%
ggplot(aes(x=Research_region, y = counts))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Region")+
ylab("Frequency")+
coord_flip()+
theme_bw()
status <- research_data %>%
count(Status) %>%
rename(counts=n) %>%
ggplot(aes(x = Status, y = counts))+
geom_bar(stat = 'identity', width=0.5) +
xlab("Status")+
ylab("Frequency")+
coord_flip()+
theme_bw()
p1 <- ggplotly(topic)
p2 <- ggplotly(region)
p3 <- ggplot(status)
p4 <- ggplot(agencies)
agencies
status
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
ggplotly(agencies)
runApp('dashboard')
ggplotly(status)
runApp('dashboard')
choice_research
runApp('dashboard')
# choices for selectInput
choice_research <- c("topic")
choice_research
choice_research[1]
# choices for selectInput
choice_research <- list("topic", "region")
choice_research[1]
choice_research[[1]]
choice_research[[1]]
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n)
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n)
region <- research_data %>%
count(Research_region) %>%
rename(counts=n)
status <- research_data %>%
count(Status) %>%
rename(counts=n)
status
runApp('dashboard')
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
arrange(counts)
topics
# barplots
topic <- research_data %>%
count(Topic) %>%
arrange(n) %>%
rename(counts=n) %>%
topics
# barplots
topic <- research_data %>%
count(Topic) %>%
arrange(n) %>%
rename(counts=n) %>%
topic
# barplots
topic <- research_data %>%
count(Topic) %>%
arrange(n) %>%
rename(counts=n) %>%
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n)
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
arrange(n) %>%
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n)
# barplots
topic <- research_data %>%
count(Topic) %>%
arrange(Topic) %>%
rename(counts=n) %>%
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n)
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
arrange(counts)
topic
runApp('dashboard')
# Importing the data
research_data <- read.csv("research_areas.csv")
# Selecting and renaming variables
research_data <- research_data[c("Topic", "Agency.and.Office.Name", "Status",
"Country.ies..in.which.research.is.will.be.conducted")]
names(research_data) <- c("Topic", "Agencies", "Status", "Research Region")
# Cleaning the data
research_data$Research_region <- substring(research_data$Research_region, 0, 13)
# Cleaning the data
research_data$Research_region <- substring(research_data$`Research Region`, 0, 13)
research_data$Status  <- gsub(" phases", '', research_data$Status)
research_data$Status  <- gsub(";", '', research_data$Status)
# barplots
topic <- research_data %>%
count(Topic) %>%
rename(counts=n) %>%
agencies <- research_data %>%
count(Agencies) %>%
rename(counts=n)
runApp('dashboard')
# Importing the data
research_data <- read.csv("research_areas.csv")
# Selecting and renaming variables
research_data <- research_data[c("Topic", "Agency.and.Office.Name", "Status",
"Country.ies..in.which.research.is.will.be.conducted")]
names(research_data) <- c("Topic", "Agencies", "Status", "Research Region")
# Cleaning the data
research_data$`Research Region` <- substring(research_data$`Research Region`, 0, 13)
research_data$Status  <- gsub(" phases", '', research_data$Status)
research_data$Status  <- gsub(";", '', research_data$Status)
research_data
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
library(shinycssloaders)
runApp('dashboard')
location_cases <- daily_cases %>%
group_by(location) %>%
summarise(across(total_cases:total_deaths, sum))
worlddata <- map_data("world")
mapped_locations <- left_join(worlddata, location_cases, by=c('region'='location'))
mapped_locations
location_cases
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
maps_df <- colnames(location_cases)
maps_df
runApp('dashboard')
mapped_locations
mapped_locations[7]
mapped_locations
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
mapped_locations
runApp('dashboard')
runApp('dashboard')
worlddata
colnames(worlddata)
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
daily_cases <- read.csv("daily_mpox_cases.csv")
daily_cases <- daily_cases[c("location", "date", "total_cases", "total_deaths")]
names(daily_cases) <- c("Location", "Date", "Cases", "Deaths")
daily_cases$date <- as.POSIXct(daily_cases$date)
runApp('dashboard')
daily_cases
location_cases
unique(location_cases$Location)
location_cases <- location_cases[location_cases$Location != "World", 2]
unique(location_cases$Location)
location_cases <- daily_cases %>%
group_by(Location) %>%
summarise(across(Cases:Deaths, sum))
location_cases <- location_cases[location_cases$Location != "World", ]
unique(location_cases$Location)
runApp('dashboard')
runApp('dashboard')
shiny::runApp()
runApp()
shinytest::recordTest('dashboard')
dir()
getwd()
wd <- getwd()
shinytest::recordTest(wd)
getwd()
